import requests
import sqlite3
from flask import Flask, jsonify, request

# Define the NVD API URL
NVD_API_URL = "https://services.nvd.nist.gov/rest/json/cves/2.0"
RESULTS_PER_PAGE = 2000

# Fetch CVE Data from NVD API
def fetch_cve_data(start_index):
    try:
        response = requests.get(NVD_API_URL, params={"resultsPerPage": RESULTS_PER_PAGE, "startIndex": start_index})
        if response.status_code == 200:
            print(f"Fetched data from NVD API, start_index: {start_index}")
            return response.json().get('vulnerabilities', [])
        else:
            print(f"Failed to fetch data from NVD API (Status code: {response.status_code})")
            return []
    except requests.RequestException as e:
        print(f"Error fetching data: {e}")
        return []

# Create database and table
def create_database():
    conn = sqlite3.connect('cve_database.db')
    cursor = conn.cursor()
    cursor.execute('''CREATE TABLE IF NOT EXISTS cve_data
                      (cve_id TEXT PRIMARY KEY, description TEXT, last_modified TEXT)''')
    conn.commit()
    conn.close()
    print("Database and table created successfully.")

# Insert CVE data into the database
def insert_cve_into_database(cve_info):
    conn = sqlite3.connect('cve_database.db')
    cursor = conn.cursor()
    try:
        cursor.execute("INSERT OR REPLACE INTO cve_data (cve_id, description, last_modified) VALUES (?, ?, ?)",
                       (cve_info['cve']['id'],
                        cve_info['cve']['descriptions'][0]['value'],
                        cve_info['cve']['lastModified']))
        conn.commit()
        print(f"Inserted {cve_info['cve']['id']} into the database.")
    except sqlite3.IntegrityError as e:
        print(f"Error inserting data: {e}")
    finally:
        conn.close()


def main():
    create_database()
    start_index = 0
    
    while True:
        cve_list = fetch_cve_data(start_index)
        if not cve_list:
            break
        for cve in cve_list:
            insert_cve_into_database(cve)
        start_index += RESULTS_PER_PAGE
    print(f"Fetched and inserted CVEs up to start index {start_index}")

    print("CVE data fetched and stored in the database.")

if __name__ == '__main__':
    main()
    
